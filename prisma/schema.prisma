// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   Boolean   @default(false) 
  image           String?
  password        String?
  planType        String    @default("premium")
  planStartDate   DateTime  @default(now())
  accounts        Account[]
  sessions        Session[]
  gradillas       Gradilla[]
  planEndDate     DateTime?
  maxGrids        Int       @default(2)
  maxTubes        Int       @default(162)
  isUnlimited     Boolean   @default(false)
  stripeCustomerId String?
  stripeSubscriptionId String?
  verificationCode String?
  trialEndsAt     DateTime?
  trialEndsAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isMainUser      Boolean   @default(true)
  mainUserId      String?   @db.ObjectId
  secondaryUsers  User[]    @relation("MainToSecondary")
  mainUser        User?     @relation("MainToSecondary", fields: [mainUserId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  auditLogs       AuditLog[]
  tubes          Tube[]
  resetToken        String?
  resetTokenExpiry  DateTime?
  reagents       Reagent[]
  stocks         Stock[]
  paypalSubscriptionId String?
}

model Gradilla {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  storagePlace String?
  temperature String?
  rows        String[]
  columns     Int[]
  fields      String[]
  tubes       Tube[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId      String   @db.ObjectId
}

model Tube {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  position   String
  data       Json
  gradilla   Gradilla @relation(fields: [gradillaId], references: [id], onDelete: Cascade)
  gradillaId String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
}

model AuditLog {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  action      String
  entityType  String
  entityId    String
  details     Json
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  userId      String   @db.ObjectId
}

model Reagent {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  unit        String
  lowStockAlert Int?      @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.ObjectId
  stocks      Stock[]
}

model Stock {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  reagentId       String    @db.ObjectId
  reagent         Reagent   @relation(fields: [reagentId], references: [id])
  quantity        Float
  lotNumber       String
  expirationDate  DateTime
  entryDate       DateTime  @default(now())
  disposalDate    DateTime?
  durationDays    Int?      
  isActive        Boolean   @default(true)
  notes           String?
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @db.ObjectId
}
